<?php
// Call EventTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'EventTest::main');
}


require_once 'PHPUnit/Framework.php';

if (!defined('APPLICATION_HOME')) { include dirname(__FILE__).'/../configuration.inc'; }
require_once APPLICATION_HOME.'/classes/Event.inc';

/**
 * Test class for Event.
 * Generated by PHPUnit on 2007-10-04 at 11:49:05.
 */
class EventTest extends PHPUnit_Framework_TestCase {
    /**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     */
    public static function main() {
        require_once 'PHPUnit/TextUI/TestRunner.php';

        $suite  = new PHPUnit_Framework_TestSuite('EventTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp() {
		$_SESSION['USER'] = new User(1);

    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown() {

    }

    /**
     * @todo Implement testSave().
     */
    public function testSave() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testPermitsEditingBy().
     */
    public function testPermitsEditingBy() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetSections().
     */
    public function testGetSections() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetSections().
     */
    public function testSetSections() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testHasSection().
     */
    public function testHasSection() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testIsAllDayEvent().
     */
    public function testIsAllDayEvent() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetRRule().
     */
    public function testSetRRule() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetRecurrences().
     */
    public function testGetRecurrences() {
		$event = new Event();
		$event->setStart('2007-10-03 03:00:00');
		$event->setEnd('2007-10-03 04:00:00');
		$event->setRrule_freq('DAILY');
		$event->setRrule_until('2007-10-15 03:00:00');

		$start_range_time = strtotime('2007-10-01');
		$end_range_time = strtotime('2007-10-30');

		$recurrences = $event->getRecurrences($start_range_time,$end_range_time);
		$this->assertEquals(count($recurrences),13);

		foreach($recurrences as $recur)
		{
			$this->assertTrue($recur instanceof EventRecurrence,'Returned an invalid recurrence');
			$this->assertNotNull($recur->getStart());
			$this->assertNotEquals($recur->getStart(),'');
		}
    }

    public function testOpenEndedrecurrenc() {
    	$event = new Event();
    	$event->setStart('2007-10-09 06:00:00');
    	$event->setEnd('2007-10-09 07:00:00');
		$event->setRrule_freq('MONTHLY');
		$event->setRrule_byday('2TU');
		$dates = $event->getRecurrences();
		$this->assertTrue(count($dates)>10);
    }

	/**
	 * Non-recurring events should still return one occurence - themselves.
	 */
    public function testEventNoRecurrences() {
    	$event = new Event();
    	$event->setStart('2007-10-29 06:00:00');
    	$event->setEnd('2007-10-29 07:00:00');
    	$dates = $event->getRecurrences();
    	$this->assertEquals(count($dates),1);
    	$this->assertEquals($dates[0]->getStart(),$event->getStart());
    }

    /**
     * @todo Implement testGetId().
     */
    public function testGetId() {
    	$event = new Event(1);
    	$this->assertEquals($event->getId(),1);
    }

    /**
     * @todo Implement testGetCreated().
     */
    public function testGetCreated() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetStartDate().
     */
    public function testGetStartDate() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetStartTime().
     */
    public function testGetStartTime() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetEndDate().
     */
    public function testGetEndDate() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetEndTime().
     */
    public function testGetEndTime() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetAllDayEvent().
     */
    public function testGetAllDayEvent() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetRRule().
     */
    public function testGetRRule() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetRRuleArray().
     */
    public function testGetRRuleArray() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetSummary().
     */
    public function testGetSummary() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetDescription().
     */
    public function testGetDescription() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * Test that a saved event has a calendar_id
     */
    public function testGetCalendar_id() {
    	# Test an existing event
    	$event = new Event(1);
    	$this->assertNotNull($event->getCalendar_id(),'Did not reveive a calendar_id');

		# A new Event should return empty or null for the calendar_id
		$event = new Event();
		$this->assertTrue(!$event->getCalendar_id());
    }

    /**
     * @todo Implement testGetLocation_id().
     */
    public function testGetLocation_id() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetUser_id().
     */
    public function testGetUser_id() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetContact_name().
     */
    public function testGetContact_name() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetContact_phone().
     */
    public function testGetContact_phone() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetContact_email().
     */
    public function testGetContact_email() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * This should return a Calendar object if the event
     * has a calendar_id
     */
    public function testGetCalendar() {
    	# Test existing event
    	$event = new Event(1);
    	$this->assertTrue($event->getCalendar() instanceof Calendar,'Did not return a Calendar');

		# This should return null or empty
    	$event = new Event();
    	$this->assertTrue(!$event->getCalendar(),'Returned a calendar when there was not a valid calendar');
    }

    /**
     * @todo Implement testGetLocation().
     */
    public function testGetLocation() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetUser().
     */
    public function testGetUser() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetStartDate().
     */
    public function testSetStartDate() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetStartTime().
     */
    public function testSetStartTime() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetEndDate().
     */
    public function testSetEndDate() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetEndTime().
     */
    public function testSetEndTime() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetAllDayEvent().
     */
    public function testSetAllDayEvent() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetSummary().
     */
    public function testSetSummary() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetDescription().
     */
    public function testSetDescription() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetCalendar_id().
     */
    public function testSetCalendar_id() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetLocation_id().
     */
    public function testSetLocation_id() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetUser_id().
     */
    public function testSetUser_id() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetContact_name().
     */
    public function testSetContact_name() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetContact_phone().
     */
    public function testSetContact_phone() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetContact_email().
     */
    public function testSetContact_email() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetCalendar().
     */
    public function testSetCalendar() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetLocation().
     */
    public function testSetLocation() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    public function testSetRrule_untilValidation() {
    	$event = new Event();
    	$start = strtotime('2007-10-29 03:00:00');
    	$end = strtotime('2007-10-31 04:00:00');
    	$event->setRrule_until('2007-10-30');

    	$this->assertTrue($event->getRrule_until() >= $event->getEnd());
    }
}

// Call EventTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'EventTest::main') {
    EventTest::main();
}
?>
