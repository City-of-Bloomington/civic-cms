<?php
// Call SectionDocumentTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'SectionDocumentTest::main');
}

require_once 'PHPUnit/Framework.php';

if (!defined('APPLICATION_HOME')) { include dirname(__FILE__).'/../configuration.inc'; }
require_once APPLICATION_HOME.'/classes/SectionDocument.inc';

/**
 * Test class for SectionDocument.
 * Generated by PHPUnit on 2007-10-09 at 13:23:52.
 */
class SectionDocumentTest extends PHPUnit_Framework_TestCase {
    /**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     */
    public static function main() {
        require_once 'PHPUnit/TextUI/TestRunner.php';

        $suite  = new PHPUnit_Framework_TestSuite('SectionDocumentTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp() {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown() {
    }

    /**
     * Make sure SectionDocuments get written to the database
     */
    public function testSave() {
		$sectionDocument = new SectionDocument();
		$sectionDocument->setSection_id(1);
		$sectionDocument->setDocument_id(2);
		$sectionDocument->save();

		$id = $sectionDocument->getId();
		$this->assertTrue($id>0,'SectionDocument was not inserted');

		$sectionDocument->setFeatured(1);
		$sectionDocument->save();
		unset($sectionDocument);

		$updatedDocument = new SectionDocument($id);
		$this->assertTrue($updatedDocument->getFeatured()==1,'SectionDocument was not updated');

		$PDO = Database::getConnection();
		$query = $PDO->prepare('delete from sectionDocuments where id=?');
		$query->execute(array($id));
    }

	/**
	 * Make sure we can clear out existing sectionDocuments
	 */
	public function testDelete()
	{
		$PDO  = Database::getConnection();
		$query = $PDO->prepare('insert sectionDocuments (section_id,document_id) values(?,?)');
		$query->execute(array(1,2));
		$id = $PDO->lastInsertId();

		$sectionDocument = new SectionDocument($id);
		$sectionDocument->delete();

		# This should return no rows
		$query = $PDO->prepare('select section_id from sectionDocuments where id=?');
		$query->execute(array($id));
		$result = $query->fetchAll();
		$this->assertTrue(count($result)==0,'Section Document was not deleted');
	}


    /**
     * @todo Implement testGetId().
     */
    public function testGetId() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetDocument_id().
     */
    public function testGetDocument_id() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetSection_id().
     */
    public function testGetSection_id() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetFeatured().
     */
    public function testGetFeatured() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetDocument().
     */
    public function testGetDocument() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testGetSection().
     */
    public function testGetSection() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetDocument_id().
     */
    public function testSetDocument_id() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetSection_id().
     */
    public function testSetSection_id() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetFeatured().
     */
    public function testSetFeatured() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetDocument().
     */
    public function testSetDocument() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testSetSection().
     */
    public function testSetSection() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
}

// Call SectionDocumentTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'SectionDocumentTest::main') {
    SectionDocumentTest::main();
}
?>
